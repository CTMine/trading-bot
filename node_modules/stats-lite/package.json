{
  "_args": [
    [
      {
        "raw": "stats-lite@^2.0.4",
        "scope": null,
        "escapedName": "stats-lite",
        "name": "stats-lite",
        "rawSpec": "^2.0.4",
        "spec": ">=2.0.4 <3.0.0",
        "type": "range"
      },
      "/Users/malbec/Documents/data/projects/AI/trading-bot"
    ]
  ],
  "_from": "stats-lite@^2.0.4",
  "_hasShrinkwrap": false,
  "_id": "stats-lite@2.2.0",
  "_location": "/stats-lite",
  "_nodeVersion": "8.11.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/stats-lite_2.2.0_1536681798003_0.8389992846413805"
  },
  "_npmUser": {
    "name": "bryce",
    "email": "bryce@ravenwall.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "stats-lite@^2.0.4",
    "scope": null,
    "escapedName": "stats-lite",
    "name": "stats-lite",
    "rawSpec": "^2.0.4",
    "spec": ">=2.0.4 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/stats-lite/-/stats-lite-2.2.0.tgz",
  "_shasum": "278a5571fa1d2e8b1691295dccc0235282393bbf",
  "_shrinkwrap": null,
  "_spec": "stats-lite@^2.0.4",
  "_where": "/Users/malbec/Documents/data/projects/AI/trading-bot",
  "author": {
    "name": "Bryce B. Baril"
  },
  "bugs": {
    "url": "https://github.com/brycebaril/node-stats-lite/issues"
  },
  "dependencies": {
    "isnumber": "~1.0.0"
  },
  "description": "A light statistical package that operates on numeric Arrays.",
  "devDependencies": {
    "dice": "0.0.2",
    "tape": "~4.6.3"
  },
  "directories": {
    "example": "examples",
    "test": "test"
  },
  "dist": {
    "integrity": "sha512-/Kz55rgUIv2KP2MKphwYT/NCuSfAlbbMRv2ZWw7wyXayu230zdtzhxxuXXcvsc6EmmhS8bSJl3uS1wmMHFumbA==",
    "shasum": "278a5571fa1d2e8b1691295dccc0235282393bbf",
    "tarball": "https://registry.npmjs.org/stats-lite/-/stats-lite-2.2.0.tgz",
    "fileCount": 4,
    "unpackedSize": 11311,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbl+dHCRA9TVsSAnZWagAAq+AQAILkF6P2gynbUWJXj7RE\nUKT3Ugh6Hrdqb2BFb2DUECXhbWS+PfkrlhZpOuNWeMTSYj+/YxWDojog1Vp+\npqDtmR+C3efpdeyCaUGIPok3BD50uWryeH3Fc3Jbl0VWDRrFzC7LS9sgUSHg\nBIPq+AJmSCkX3ucAA/LDu+/JWhzKSYbwCOS6mNu0xQON6n59ulRpJNNyi1wy\n+a5DHGvHe2QYZpI/GlBwXW+Jiofz1TmDSg58Y4QtbkdwSkuv61rCrjVwFjCx\nltv5g7yu7zi3pdWQiUD9z2zoNysCjKRDpOiv0kDR8R9y/T5gCszykIoRLvjD\neZgPEBiIE3R2q8dEZAfHzOntczoFf6q9wYsa5MYYGmvN85USqUl3xRUpvoC1\nlIjlVaoTelrQ6F8n3ENl+U8R2McsoiNuiSXqNHkF1abjLGQpCVRjiW8WmzTO\nHqNwrHD2z2QbQe/1RrmPfUBi0OVmKHApTy+Eurmh0/RW4Rh7cR9V/mthvkq8\nr7mCChZVal49g6ye7/yKdBPhBAzcNeQO65KWqJ4gRArUJ2sZaenvF4uXtGdZ\n51fX4zBDFqTanXNMLBBRqbUmMx7GW7Z/wUjEpY3hxDjmzie2/tCeob6+ZFGq\nXsScdEQLFbeuGNRaApISVSsWijY5OAZGlMxPOBDie2dfg7KVxurHKF1pvSxz\n0Pxm\r\n=Im5I\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=2.0.0"
  },
  "gitHead": "be705f15801fb431597289d7ffbf6d5a10b3f71a",
  "homepage": "https://github.com/brycebaril/node-stats-lite",
  "keywords": [
    "stats",
    "statistics",
    "numbers",
    "math",
    "sum",
    "mean",
    "average",
    "mode",
    "median",
    "percentile",
    "variance",
    "deviation"
  ],
  "license": "MIT",
  "main": "stats.js",
  "maintainers": [
    {
      "name": "bryce",
      "email": "bryce@ravenwall.com"
    }
  ],
  "name": "stats-lite",
  "optionalDependencies": {},
  "readme": "stats-lite\n=====\n\n[![NPM](https://nodei.co/npm/stats-lite.png)](https://nodei.co/npm/stats-lite/)\n\nA fairly light statistical package. Works with numeric arrays, and will automatically filter out non-numeric values and attempt to convert string numeric values.\n\n## Install\n\n```\n npm install stats-lite --save\n```\n\nExample\n---\n\n[Live Demo using Browserify!](http://requirebin.com/embed?gist=brycebaril/9591291)\n\n```javascript\nvar stats = require(\"stats-lite\")\n\nvar dice = require(\"dice\")\n\nvar rolls = []\nfor (var i = 0; i < 3000; i++) {\n  rolls.push(dice.sum(dice.roll(\"2d6\")))\n}\n\nconsole.log(\"sum: %s\", stats.sum(rolls))\nconsole.log(\"mean: %s\", stats.mean(rolls))\nconsole.log(\"median: %s\", stats.median(rolls))\nconsole.log(\"mode: %s\", stats.mode(rolls))\nconsole.log(\"variance: %s\", stats.variance(rolls))\nconsole.log(\"standard deviation: %s\", stats.stdev(rolls))\nconsole.log(\"sample standard deviation: %s\", stats.sampleStdev(rolls))\nconsole.log(\"85th percentile: %s\", stats.percentile(rolls, 0.85))\nconsole.log(\"histogram:\", stats.histogram(rolls, 10))\n\n/* Your exact numbers may vary, but they should be pretty similar:\nsum: 21041\nmean: 7.0136666666666665\nmedian: 7\nmode: 7\nvariance: 5.8568132222220415\nstandard deviation: 2.4200853749861886\nsample standard deviation: 2.4204888234135953\n85th percentile: 10\nhistogram { values: [ 94, 163, 212, 357, 925, 406, 330, 264, 164, 85 ],\n  bins: 10,\n  binWidth: 1.05,\n  binLimits: [ 1.75, 12.25 ] }\n*/\n\n```\n\n**Compatibility Notice**: Version 2.0.0+ of this library use features that require Node.js v4.0.0 and above\n\nAPI\n===\n\nAll of the exported functions take `vals` which is an array of numeric values. Non-numeric values will be removed, and string numbers will be converted to Numbers.\n\n**NOTE**: This will impact some operations, e.g. `mean([null, 1, 2, 3])` will be calculated as `mean([1, 2, 3])`, (e.g. `6 / 3 = 2`, NOT `6 / 4 = 1.5`)\n\n`numbers(vals)`\n---\n\nAccepts an array of values and returns an array consisting of only numeric values from the source array. Converts what it can and filters out anything else. e.g.\n\n```js\nnumbers([\"cat\", 1, \"22.9\", 9])\n// [1, 22.9, 9]\n```\n\n`sum(vals)`\n---\n\n[Sum](http://en.wikipedia.org/wiki/Summation) the values in the array.\n\n`mean(vals)`\n---\n\nCalculate the [mean](http://en.wikipedia.org/wiki/Mean) average value of `vals`.\n\n`median(vals)`\n---\n\nCalculate the [median](http://en.wikipedia.org/wiki/Median) average value of `vals`.\n\n`mode(vals)`\n---\n\nCalculate the [mode](http://en.wikipedia.org/wiki/Mode_statistics) average value of `vals`.\n\nIf `vals` is multi-modal (contains multiple modes), `mode(vals)` will return a ES6 Set of the modes.\n\n`variance(vals)`\n---\n\nCalculate the [variance](http://en.wikipedia.org/wiki/Variance) from the mean for a population.\n\n`stdev(vals)`\n---\n\nCalculate the [standard deviation](http://en.wikipedia.org/wiki/Standard_deviation) of the values from the mean for a population.\n\n`sampleVariance(vals)`\n---\n\nCalculate the [variance](http://en.wikipedia.org/wiki/Variance) from the mean for a sample.\n\n`sampleStdev(vals)`\n---\n\nCalculate the [standard deviation](http://en.wikipedia.org/wiki/Standard_deviation) of the values from the mean for a sample.\n\n\n`percentile(vals, ptile)`\n---\n\nCalculate the value representing the desired [percentile](http://en.wikipedia.org/wiki/Percentile) `(0 < ptile <= 1)`. Uses the Estimation method to interpolate non-member percentiles.\n\n`histogram(vals[, bins])`\n---\n\nBuild a histogram representing the distribution of the data in the provided number of `bins`. If `bins` is not set, it will choose one based on `Math.sqrt(vals.length)`. Data will look like:\n```\nhistogram {\n  values: [ 86, 159, 253, 335, 907, 405, 339, 270, 146, 100 ],\n  bins: 10,\n  binWidth: 1.05,\n  binLimits: [ 1.75, 12.25 ]\n}\n```\nWhere `values` are the bins and the counts of the original values falling in that range. The ranges can be calculated from the `binWidth` and `binLimits`. For example, the first bin `values[0]` in this example is from `1.75 < value <= 2.8`. The third bin `values[2]` would be `1.75 + (1.05 * 2) < value <= 1.75 + (1.05 * 3)` or `3.85 < value <= 4.9`.\n\nLICENSE\n=======\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/brycebaril/node-stats-lite.git"
  },
  "scripts": {
    "test": "node test/"
  },
  "version": "2.2.0"
}
